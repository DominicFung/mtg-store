{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/Dom/Projects/mtg-store/web/app/box/imageCropper.tsx"],"sourcesContent":["import { Rnd } from \"react-rnd\";\nimport { useEffect, useRef, useState } from \"react\";\nimport JSZip from \"jszip\";\n\ninterface Props {\n  imageSrc: string,\n  setCrops: (a: [string, string, string]) => void\n}\n\nconst BOX_WIDTHS = [392, 255, 392];\nconst ORIGINAL_HEIGHT = 326;\nconst TOTAL_ORIGINAL_WIDTH = BOX_WIDTHS.reduce((a, b) => a + b, 0);\nconst GAP = 10;\n\nexport default function GroupedCropBoxes({ imageSrc, setCrops }: Props) {\n  const [imgDimensions, setImgDimensions] = useState({ width: 0, height: 0 });\n  const [groupBox, setGroupBox] = useState({ x: 0, y: 0, width: 0, height: 0 });\n  const [croppedImages, setCroppedImages] = useState<string[]>([]);\n\n  const calculateFittingSize = (imgW: number, imgH: number) => {\n    const scaleX = imgW / TOTAL_ORIGINAL_WIDTH;\n    const scaleY = imgH / ORIGINAL_HEIGHT;\n    const scale = Math.min(scaleX, scaleY);\n\n    const width = TOTAL_ORIGINAL_WIDTH * scale;\n    const height = ORIGINAL_HEIGHT * scale;\n    const x = (imgW - width) / 2;\n    const y = (imgH - height) / 2;\n\n    return { x, y, width, height };\n  };\n\n  useEffect(() => {\n    if (imgDimensions.width && imgDimensions.height) {\n      const initialBox = calculateFittingSize(\n        imgDimensions.width,\n        imgDimensions.height\n      );\n      setGroupBox(initialBox);\n    }\n  }, [imgDimensions]);\n\n  const handleCropAndDownload = async () => {\n    const img = new Image();\n    img.src = imageSrc;\n    await img.decode();\n\n    const scaleX = img.naturalWidth / imgDimensions.width;\n    const scaleY = img.naturalHeight / imgDimensions.height;\n\n    let xOffset = 0;\n    const previews: string[] = [];\n    const zip = new JSZip();\n    let crops: [string, string, string] = [\"\", \"\", \"\"]\n\n    for (let i = 0; i < 3; i++) {\n      const widthRatio = BOX_WIDTHS[i] / TOTAL_ORIGINAL_WIDTH;\n      const boxWidth = groupBox.width * widthRatio;\n\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = boxWidth * scaleX;\n      canvas.height = groupBox.height * scaleY;\n\n      const ctx = canvas.getContext(\"2d\")!;\n      ctx.drawImage(\n        img,\n        (groupBox.x + xOffset) * scaleX,\n        groupBox.y * scaleY,\n        boxWidth * scaleX,\n        groupBox.height * scaleY,\n        0,\n        0,\n        canvas.width,\n        canvas.height\n      );\n\n      const dataUrl = canvas.toDataURL(\"image/png\");\n      previews.push(dataUrl);\n\n      // Add to ZIP\n      const base64Data = dataUrl.replace(/^data:image\\/png;base64,/, \"\");\n      zip.file(`crop-${i + 1}.png`, base64Data, { base64: true });\n\n      // add to cropped images\n      crops[i] = dataUrl\n\n      xOffset += boxWidth;\n    }\n\n    setCroppedImages(previews);\n    setCrops(crops)\n\n    // Generate and download ZIP\n    // const content = await zip.generateAsync({ type: \"blob\" });\n    // const zipUrl = URL.createObjectURL(content);\n    // const link = document.createElement(\"a\");\n    // link.href = zipUrl;\n    // link.download = \"cropped-images.zip\";\n    // link.click();\n  };\n\n  return (\n    <div className=\"relative mt-4\">\n      <img\n        src={imageSrc}\n        alt=\"Uploaded\"\n        onLoad={(e) => {\n          const { width, height } = e.currentTarget;\n          setImgDimensions({ width, height });\n        }}\n        style={{ width: \"100%\", maxWidth: \"800px\" }}\n      />\n\n      <div\n        className=\"absolute top-0 left-0\"\n        style={{\n          width: imgDimensions.width,\n          height: imgDimensions.height,\n        }}\n      >\n        {groupBox.width > 0 && (\n          <Rnd\n            size={{ width: groupBox.width, height: groupBox.height }}\n            position={{ x: groupBox.x, y: groupBox.y }}\n            onDragStop={(_, d) => {\n              const maxX = imgDimensions.width - groupBox.width;\n              const maxY = imgDimensions.height - groupBox.height;\n              setGroupBox({\n                ...groupBox,\n                x: Math.max(0, Math.min(d.x, maxX)),\n                y: Math.max(0, Math.min(d.y, maxY)),\n              });\n            }}\n            onResizeStop={(_, __, ref, ___, pos) => {\n              let newWidth = parseFloat(ref.style.width);\n              let newHeight = parseFloat(ref.style.height);\n\n              const scaleX = imgDimensions.width / TOTAL_ORIGINAL_WIDTH;\n              const scaleY = imgDimensions.height / ORIGINAL_HEIGHT;\n              const maxScale = Math.min(scaleX, scaleY);\n\n              const maxW = TOTAL_ORIGINAL_WIDTH * maxScale;\n              const maxH = ORIGINAL_HEIGHT * maxScale;\n\n              newWidth = Math.min(newWidth, maxW);\n              newHeight = Math.min(newHeight, maxH);\n\n              setGroupBox({\n                width: newWidth,\n                height: newHeight,\n                x: Math.max(0, Math.min(pos.x, imgDimensions.width - newWidth)),\n                y: Math.max(0, Math.min(pos.y, imgDimensions.height - newHeight)),\n              });\n            }}\n            lockAspectRatio={TOTAL_ORIGINAL_WIDTH / ORIGINAL_HEIGHT}\n            bounds=\"parent\"\n            style={{\n              border: \"1px dashed #333\",\n              display: \"flex\",\n              flexDirection: \"row\",\n              position: \"absolute\",\n              background: \"rgba(255,255,255,0.02)\",\n            }}\n          >\n            {BOX_WIDTHS.map((w, i) => {\n              const widthRatio = w / TOTAL_ORIGINAL_WIDTH;\n              return (\n                <div\n                  key={i}\n                  style={{\n                    width: `${widthRatio * 100}%`,\n                    height: \"100%\",\n                    border: \"2px solid red\",\n                    boxSizing: \"border-box\",\n                  }}\n                />\n              );\n            })}\n          </Rnd>\n        )}\n      </div>\n\n      <button\n        className=\"mt-4 px-4 py-2 bg-green-600 text-white rounded\"\n        onClick={handleCropAndDownload}\n      >\n        Crop and Download\n      </button>\n\n      {/* Preview */}\n      {croppedImages.length > 0 && (\n        <div className=\"mt-4 flex gap-[10px]\">\n          {croppedImages.map((src, i) => (\n            <img\n              key={i}\n              src={src}\n              alt={`Crop ${i + 1}`}\n              className=\"border border-gray-300 rounded shadow\"\n              style={{ maxHeight: \"200px\" }}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/Dom/Projects/mtg-store/web/app/box/spinningBox.tsx"],"sourcesContent":["\"use client\"\n\n\nimport React, { useRef, useState } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, useTexture, useGLTF } from \"@react-three/drei\";\nimport * as THREE from \"three\";\n\ninterface Props {\n  textures: [string, string, string]; // base64 or URL for 3 images\n  glbPath: string; // path to your GLB file\n}\n\nfunction TexturedBox({ textures, glbPath }: Props) {\n  const modelRef = useRef<THREE.Group>(null);\n  const [texture1, texture2, texture3] = useTexture(textures);\n  const { scene, nodes } = useGLTF(glbPath) as any;\n  const [autoRotate, setAutoRotate] = useState(true);\n\n  useFrame((_, delta) => {\n    if (autoRotate && modelRef.current) {\n      modelRef.current.rotation.y += delta * 0.5;\n    }\n  });\n\n  return (\n    <group ref={modelRef} onPointerDown={() => setAutoRotate(false)}>\n      {/* Make sure your GLB has named meshes: Face1, Face2, Face3 */}\n      <mesh geometry={nodes.Face1.geometry}>\n        <meshStandardMaterial map={texture1} />\n      </mesh>\n      <mesh geometry={nodes.Face2.geometry}>\n        <meshStandardMaterial map={texture2} />\n      </mesh>\n      <mesh geometry={nodes.Face3.geometry}>\n        <meshStandardMaterial map={texture3} />\n      </mesh>\n    </group>\n  );\n}\n\nexport default function SpinningBoxWithTextures({ textures, glbPath }: Props) {\n  return (\n    <Canvas camera={{ position: [0, 0, 40] }} style={{width: 1040, height: 1040}}>\n      <ambientLight intensity={0.7} />\n      <directionalLight position={[2, 2, 2]} />\n      <TexturedBox textures={textures} glbPath={glbPath} />\n      <OrbitControls enableZoom={true} minDistance={30} maxDistance={50} />\n    </Canvas>\n  );\n}"],"names":[],"mappings":";;;;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AALA;;;;;AAaA,SAAS,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAS;IAC/C,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAe;IACrC,MAAM,CAAC,UAAU,UAAU,SAAS,GAAG,CAAA,GAAA,2JAAA,CAAA,aAAU,AAAD,EAAE;IAClD,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,wJAAA,CAAA,UAAO,AAAD,EAAE;IACjC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,CAAA,GAAA,+MAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,GAAG;QACX,IAAI,cAAc,SAAS,OAAO,EAAE;YAClC,SAAS,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;QACzC;IACF;IAEA,qBACE,8OAAC;QAAM,KAAK;QAAU,eAAe,IAAM,cAAc;;0BAEvD,8OAAC;gBAAK,UAAU,MAAM,KAAK,CAAC,QAAQ;0BAClC,cAAA,8OAAC;oBAAqB,KAAK;;;;;;;;;;;0BAE7B,8OAAC;gBAAK,UAAU,MAAM,KAAK,CAAC,QAAQ;0BAClC,cAAA,8OAAC;oBAAqB,KAAK;;;;;;;;;;;0BAE7B,8OAAC;gBAAK,UAAU,MAAM,KAAK,CAAC,QAAQ;0BAClC,cAAA,8OAAC;oBAAqB,KAAK;;;;;;;;;;;;;;;;;AAInC;AAEe,SAAS,wBAAwB,EAAE,QAAQ,EAAE,OAAO,EAAS;IAC1E,qBACE,8OAAC,mMAAA,CAAA,SAAM;QAAC,QAAQ;YAAE,UAAU;gBAAC;gBAAG;gBAAG;aAAG;QAAC;QAAG,OAAO;YAAC,OAAO;YAAM,QAAQ;QAAI;;0BACzE,8OAAC;gBAAa,WAAW;;;;;;0BACzB,8OAAC;gBAAiB,UAAU;oBAAC;oBAAG;oBAAG;iBAAE;;;;;;0BACrC,8OAAC;gBAAY,UAAU;gBAAU,SAAS;;;;;;0BAC1C,8OAAC,iKAAA,CAAA,gBAAa;gBAAC,YAAY;gBAAM,aAAa;gBAAI,aAAa;;;;;;;;;;;;AAGrE","debugId":null}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/Dom/Projects/mtg-store/web/app/box/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport ImageCropper from './imageCropper';\nimport SpinningBoxWithTextures from './spinningBox';\n\nexport default function Home() {\n  const [image, setImage] = useState<string | null>(null);\n  const [crops, setCrops] = useState<[string, string, string] | null>(null);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    const file = acceptedFiles[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = () => setImage(reader.result as string);\n    reader.readAsDataURL(file);\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: { 'image/*': [] },\n    multiple: false,\n  });\n\n  return (\n    <div className=\"p-4\">\n      {crops && <div className=''>\n        <SpinningBoxWithTextures\n          textures={crops} // base64 or hosted image URLs\n          glbPath=\"/models/three-sided-box.glb\"\n        />\n      </div>}\n      \n      <div\n        {...getRootProps()}\n        className={`border-2 border-dashed p-10 text-center rounded-md cursor-pointer transition ${\n          isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'\n        }`}\n      >\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p className=\"text-blue-500 font-semibold\">Drop the image here...</p>\n        ) : (\n          <p className=\"text-gray-500\">Drag & drop an image here, or click to select one</p>\n        )}\n      </div>\n\n      {image && <ImageCropper imageSrc={image} setCrops={setCrops}/>}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmC;IAEpE,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC1B,MAAM,OAAO,aAAa,CAAC,EAAE;QAC7B,IAAI,CAAC,MAAM;QAEX,MAAM,SAAS,IAAI;QACnB,OAAO,MAAM,GAAG,IAAM,SAAS,OAAO,MAAM;QAC5C,OAAO,aAAa,CAAC;IACvB,GAAG,EAAE;IAEL,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,CAAA,GAAA,wKAAA,CAAA,cAAW,AAAD,EAAE;QAChE;QACA,QAAQ;YAAE,WAAW,EAAE;QAAC;QACxB,UAAU;IACZ;IAEA,qBACE,8OAAC;QAAI,WAAU;;YACZ,uBAAS,8OAAC;gBAAI,WAAU;0BACvB,cAAA,8OAAC,0HAAA,CAAA,UAAuB;oBACtB,UAAU;oBACV,SAAQ;;;;;;;;;;;0BAIZ,8OAAC;gBACE,GAAG,cAAc;gBAClB,WAAW,CAAC,6EAA6E,EACvF,eAAe,+BAA+B,mBAC9C;;kCAEF,8OAAC;wBAAO,GAAG,eAAe;;;;;;oBACzB,6BACC,8OAAC;wBAAE,WAAU;kCAA8B;;;;;6CAE3C,8OAAC;wBAAE,WAAU;kCAAgB;;;;;;;;;;;;YAIhC,uBAAS,8OAAC,2HAAA,CAAA,UAAY;gBAAC,UAAU;gBAAO,UAAU;;;;;;;;;;;;AAGzD","debugId":null}}]
}